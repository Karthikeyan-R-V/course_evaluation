{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Surendhar S\\\\Documents\\\\Web\\\\form\\\\frontend\\\\src\\\\Admin.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Admin = () => {\n  _s();\n  const subjects = [\"Probability,Statistics and Queuing Theory\", \"Digital Systems\", \"Discrete Structures\", \"Data Structures\", \"Foundations of Data Science\", \"Object Oriented Programming\", \"Engineering Exploration\", \"Digital Systems Laboratory\", \"Data Structures Laboratory\"];\n  const categories = [\"Planning and organization\", \"Presentation and Communication\", \"Student participation\", \"Class Management\"];\n  const [data, setData] = useState({});\n  const fetchCourseMark = async (sub, category) => {\n    try {\n      const response = await fetch(`http://localhost:3001/dashboard`, {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          sub,\n          category\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      return data[0].totalScore;\n    } catch (err) {\n      console.error(err);\n      return 0;\n    }\n  };\n  const fetchStdCount = useCallback(async sub => {\n    try {\n      const response = await fetch(`http://localhost:3001/student/${sub}`);\n      const data = await response.json();\n      console.log(data);\n      return data;\n    } catch (err) {\n      console.error(err);\n      return 0;\n    }\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      const newData = {};\n      for (const subject of subjects) {\n        for (const category of categories) {\n          const key = `${subject}-${category}`;\n          newData[key] = await fetchCourseMark(subject, category);\n        }\n      }\n      console.log(newData);\n      setData(newData);\n    };\n    const fetchStdCountData = async () => {\n      const newCounts = {};\n      for (const subject of subjects) {\n        newCounts[subject] = await fetchStdCount(subject);\n        console.log(newCounts[subject]);\n      }\n      console.log(newCounts);\n      setData(prevData => ({\n        ...prevData,\n        counts: newCounts\n      }));\n    };\n    fetchData();\n    fetchStdCountData();\n  }, [fetchStdCount]);\n  const totRes = useCallback(sub => {\n    let tot = 0;\n    for (const category of categories) {\n      const key = `${sub}-${category}`;\n      tot += data[key];\n    }\n    return tot;\n  }, [data, categories]);\n  const average = useCallback(sub => {\n    if (data.counts && data.counts[sub] === 0) return 0;\n    return Math.round(totRes(sub) / data.counts[sub]);\n  }, [data.counts, totRes]);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"table table-bordered table-striped\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Course Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: category\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Total\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Average\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: subjects.map((subject, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: subject\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), categories.map((category, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: data[`${subject}-${category}`]\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: totRes(subject)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: average(subject)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(Admin, \"CApGCQmTyaLfGrVrkBWIeNtXd3M=\");\n_c = Admin;\nexport default Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","jsxDEV","_jsxDEV","Admin","_s","subjects","categories","data","setData","fetchCourseMark","sub","category","response","fetch","method","headers","body","JSON","stringify","json","console","log","totalScore","err","error","fetchStdCount","fetchData","newData","subject","key","fetchStdCountData","newCounts","prevData","counts","totRes","tot","average","Math","round","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","rowIndex","colIndex","_c","$RefreshReg$"],"sources":["C:/Users/Surendhar S/Documents/Web/form/frontend/src/Admin.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Admin = () => {\r\n    const subjects = [\"Probability,Statistics and Queuing Theory\", \"Digital Systems\", \"Discrete Structures\",\"Data Structures\",\"Foundations of Data Science\",\"Object Oriented Programming\",\"Engineering Exploration\",\"Digital Systems Laboratory\",\"Data Structures Laboratory\"];\r\n    const categories = [\"Planning and organization\", \"Presentation and Communication\", \"Student participation\", \"Class Management\"];\r\n\r\n    const [data, setData] = useState({});\r\n\r\n    const fetchCourseMark = async (sub, category) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:3001/dashboard`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ sub, category }),\r\n            });\r\n            const data = await response.json();\r\n            console.log(data);\r\n            return data[0].totalScore;\r\n        } catch (err) {\r\n            console.error(err);\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    const fetchStdCount = useCallback(async (sub) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:3001/student/${sub}`);\r\n            const data = await response.json();\r\n            console.log(data);\r\n            return data;\r\n        } catch (err) {\r\n            console.error(err);\r\n            return 0;\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const newData = {};\r\n            for (const subject of subjects) {\r\n                for (const category of categories) {\r\n                    const key = `${subject}-${category}`;\r\n                    newData[key] = await fetchCourseMark(subject, category);\r\n                }\r\n            }\r\n            console.log(newData);\r\n            setData(newData);\r\n        };\r\n\r\n        const fetchStdCountData = async () => {\r\n            const newCounts = {};\r\n            for (const subject of subjects) {\r\n                newCounts[subject] = await fetchStdCount(subject);\r\n                console.log(newCounts[subject]);\r\n            }\r\n            console.log(newCounts);\r\n            setData((prevData) => ({ ...prevData, counts: newCounts }));\r\n        };\r\n\r\n        fetchData();\r\n        fetchStdCountData();\r\n    }, [fetchStdCount]);\r\n\r\n    const totRes = useCallback((sub) => {\r\n        let tot = 0;\r\n        for (const category of categories) {\r\n            const key = `${sub}-${category}`;\r\n            tot += data[key];\r\n        }\r\n        return tot;\r\n    }, [data, categories]);\r\n\r\n    const average = useCallback((sub) => {\r\n        if (data.counts && data.counts[sub] === 0) return 0;\r\n        return Math.round(totRes(sub) / data.counts[sub]);\r\n    }, [data.counts, totRes]);\r\n\r\n    return (\r\n        <table className='table table-bordered table-striped'>\r\n            <thead>\r\n                <tr>\r\n                    <th>Course Name</th>\r\n                    {categories.map((category, index) => (\r\n                        <th key={index}>{category}</th>\r\n                    ))}\r\n                    <th>Total</th>\r\n                    <th>Average</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {subjects.map((subject, rowIndex) => (\r\n                    <tr key={rowIndex}>\r\n                        <td>{subject}</td>\r\n                        {categories.map((category, colIndex) => (\r\n                            <td key={colIndex}>{data[`${subject}-${category}`]}</td>\r\n                        ))}\r\n                        <td>{totRes(subject)}</td>\r\n                        <td>{average(subject)}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default Admin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}